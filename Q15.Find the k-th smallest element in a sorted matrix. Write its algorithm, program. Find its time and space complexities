import java.util.PriorityQueue;

class Element {
    int value, row, col;

    Element(int value, int row, int col) {
        this.value = value;
        this.row = row;
        this.col = col;
    }
}

public class KthSmallestInSortedMatrix {
    public static int kthSmallest(int[][] matrix, int k) {
        int n = matrix.length;

      
        PriorityQueue<Element> minHeap = new PriorityQueue<>((a, b) -> a.value - b.value);

     
        for (int i = 0; i < n; i++) {
            minHeap.add(new Element(matrix[i][0], i, 0));
        }

     
        for (int i = 0; i < k - 1; i++) {
            Element curr = minHeap.poll();
            int row = curr.row, col = curr.col;

           
            if (col + 1 < n) {
                minHeap.add(new Element(matrix[row][col + 1], row, col + 1));
            }
        }

       
        return minHeap.poll().value;
    }

    public static void main(String[] args) {
        int[][] matrix = {
            {1, 5, 9},
            {10, 11, 13},
            {12, 13, 15}
        };
        int k = 8;
        System.out.println("The " + k + "-th smallest element is: " + kthSmallest(matrix, k));
    }
}
Time Complexity: O(log N)
Space Complexity: O(N)
